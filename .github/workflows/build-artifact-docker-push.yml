---
name: Docker push (main) 🚀 🚀 🚀
run-name: ➡️ ${{ github.ref }} - ${{ github.event_name }} (${{ github.event.action }})

on:
  push:
    branches:
      - main
      - master

  pull_request:
    types: [ 'opened', 'edited', 'reopened', 'synchronize' ]

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout Repository ♻️♻️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Repository Name 🔍
        id: repo
        shell: bash
        run: |
          echo "name=$(echo '${{ github.repository }}' | cut -d '/' -f2- | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up JDK 🌐🌐🌐
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'

      - name: Maven clean 🧹🧹🧹
        run: |
          echo "::group::Maven clean"
          ./mvnw --batch-mode clean
          echo "::endgroup::"

      - name: Build with Maven 🚀 🚀 🚀
        run: |
          echo "::group::Maven Build"
          ./mvnw install -DskipTests
          echo "::endgroup::"
        shell: bash

      - name: Log into registry ${{ env.REGISTRY }} 🐳🐳🐳
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate short git sha 📝📝📝
        id: short_sha
        run: |
            echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker metadata 📝📝📝
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}
          tags: ${{ github.run_number }}.${{ github.run_id }}

      - name: Build and push Docker image to GHCR 🐳 🐳 🐳
        id: docker_build
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}

#      - name: Build and push Docker image to ECR 🐳 🐳 🐳
#        env:
#          CUSTOM_VERSION: ${{ github.run_number }}.${{ github.run_id }}.${{ steps.short_sha.outputs.SHORT_SHA }}
#          GIT_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        id: docker_build
#        run: |
#          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
#          docker build --tag ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ env.CUSTOM_VERSION }} .
#          docker push ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ env.CUSTOM_VERSION }}
#        shell: bash

#      - name: Set Git User Identity 🧑‍🎤🧑‍🎤🧑‍🎤
#        if: github.event_name != 'pull_request'
#        run: |
#          git config --local user.email "action@github.com"
#          git config --local user.name "GitHub Action"
#
#      - name: Create Git Tag 📝📝📝 & release those changes to same branch
#        if: github.event_name != 'pull_request'
#        id: create_tag
#        run: |
#          echo "::group::Create Git Tag"
#          tag_name="v${{ env.CUSTOM_VERSION }}"
#          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
#          git tag -a "$tag_name" -m "Auto generated tag from GitHub Actions 🤖🤖🤖"
#          git push origin "$tag_name"
#          echo "::endgroup::"
#
#      - name: Create a Release in a GitHub Action ✅✅✅
#        if: github.event_name != 'pull_request'
#        id: create_release
#        uses: comnoco/create-release-action@v2.0.5
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ env.CUSTOM_VERSION }}
#          release_name: release-${{ env.CUSTOM_VERSION }}
#          draft: false
#          prerelease: false
#          body: |
#            # Release notes 💥💥💥
#            ### Version:
#            - Automated - Tagging version *${{ env.CUSTOM_VERSION }}* *from ${{ github.ref }}* 🎉🎉🎉
#            - Tag - Tag name: ${{ env.TAG_NAME }}
#            - Latest tag - ${{ env.LATEST_TAG }}
#            - Branch - ${{ github.ref }}
#            ### Commits:
#            ${{ env.FORMATTED_COMMIT_LIST }}


